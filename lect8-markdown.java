package markup;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * A KindaGallileo object is a parser/evaluator for markdown that reverses
 * italic text so that Kepler can't read it.
 *
 * Adapted from Fall 2011 code.
 */
public class KindaGallileo {
    
    private final MarkdownLexer lex;
    
    public KindaGallileo(String markdown) {
        this.lex = new MarkdownLexer(markdown);
    }
    
    /**
     * Evaluate the input text, reversing italic sections.
     * Can be called only once on a given object.
     * Modifies this object, consuming all the text.
     *
     * @return string of text with markdown formatting removed
     * and italic sections replaced by a backwards text.
     * For example, new Gallileo("The killer was _Mrs. White_").eval()
     * ==> "The killer was etihW .srM"
     */
    public String eval() {
        return evalMarkdown();
    }
    
    // Grammar:
    //   Markdown ::= (Normal | Italic)*
    //   Normal ::= Text
    //   Italic ::= _ Text? _
    //
    //  (Text and _ are tokens generated by MarkdownLexer)
    
    /**
     * Evaluates the Markdown production of the grammar.
     * Modifies lex by consuming all the remaining tokens.
     *
     * @return evaluated string
     */
    private String evalMarkdown() {
        StringBuilder sb = new StringBuilder();
        
        for (Token tok = lex.next(); tok.getType() != Type.EOF; tok = lex.next()) {
            switch (tok.getType()) {
            case UNDERLINE:
                sb.append(evalItalic(tok));
                break;    
            case TEXT:
                sb.append(evalNormal(tok));
                break;
            default:
                throw new AssertionError("unexpected token: " + tok.getType());
            }
        }
        
        return sb.toString();
    }
    
    /**
     * Evaluates the Normal production of the grammar.
     * Modifies lex by consuming an entire production, including the last token of the production.
     * @param tok Token that started this production (required to be TEXT)
     * @return evaluated string
     */
    private String evalNormal(Token tok) {
        // normal text isn't changed by this process, just return it as-is
        return tok.getValue();
    }

    /**
     * Evaluates the Italic production of the grammar.
     * Modifies lex by consuming an entire Italic production, including its final token.
     * @param tok Token that started this production (required to be UNDERLINE)
     * @return evaluated string
     */
    private String evalItalic(Token tok) {
        StringBuilder sb = new StringBuilder();
        
        // the passed in tok is UNDERLINE; skip it and advance to the next
        
        // note that this code actually evaluates _ TEXT* _, not just _ TEXT? _
        for (tok = lex.next(); tok.getType() != Type.EOF && tok.getType() != Type.UNDERLINE; tok = lex.next()) {
            if (tok.getType() == Type.TEXT) {
                // collect and reverse the text
                sb.append(new StringBuffer(tok.getValue()).reverse().toString());
            } else {
                throw new AssertionError("unexpected token: " + tok.getType());                
            }
        }
        
        return sb.toString();
    }
    
  
    
    /**
     * Main method.
     */
    public static void main(String[] args) {
        KindaGallileo g = new KindaGallileo("I've discovered that _Saturn has ears_.  Suck it, Kepler!");
        String message = g.eval();
        System.out.println(message);
    }
}
